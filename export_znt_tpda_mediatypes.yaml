zabbix_export:
  version: '6.2'
  date: '2023-06-07T14:40:25Z'
  media_types:
    -
      name: 'ZNT TPDA'
      type: WEBHOOK
      parameters:
        -
          name: ack_links
          value: 'true'
        -
          name: actionid_tag
          value: 'true'
        -
          name: action_id
          value: '{ACTION.ID}'
        -
          name: action_type
          value: trigger
        -
          name: body
          value: '{ALERT.MESSAGE}'
        -
          name: bot
          value: '@znt_test_test_bot'
        -
          name: bot_group
        -
          name: eventid_tag
          value: 'true'
        -
          name: event_id
          value: '{EVENT.ID}'
        -
          name: event_links
          value: 'true'
        -
          name: event_tag
          value: 'true'
        -
          name: event_tags
          value: '{EVENT.TAGS}'
        -
          name: graphs
          value: 'true'
        -
          name: graphs_period
          value: default
        -
          name: graph_links
          value: 'true'
        -
          name: header
          value: '{ALERT.SUBJECT}'
        -
          name: hostid_tag
          value: 'true'
        -
          name: hostname
          value: '{HOST.HOST}'
        -
          name: host_id
          value: '{HOST.ID}'
        -
          name: host_links
          value: 'true'
        -
          name: itemid_tag
          value: 'true'
        -
          name: item_id
          value: '{ITEM.ID1} {ITEM.ID2} {ITEM.ID3} {ITEM.ID4}'
        -
          name: send_to
          value: '{ALERT.SENDTO}'
        -
          name: title
          value: '{HOST.HOST} - {EVENT.NAME}'
        -
          name: triggerid_tag
          value: 'true'
        -
          name: trigger_id
          value: '{TRIGGER.ID}'
        -
          name: trigger_links
          value: 'true'
        -
          name: trigger_url
          value: '{TRIGGER.URL}'
        -
          name: zntmentions
          value: 'true'
        -
          name: zntsettings_tag
          value: 'true'
        -
          name: znt_host
          value: 192.168.1.200
        -
          name: znt_port
          value: '8081'
        -
          name: znt_proto
          value: http
      script: |
        var znt = {
                
                    sendmessage: function () {
                        var fields = {
                			send_to: params.send_to,
                			bot: params.bot,
                			bot_group: params.bot_group,
                			title: params.title,
                			message: params.message,
                			header: params.header,
                			body: params.body,
                			hostname: params.hostname,
                			itemid: params.item_id,
                			hostid: params.host_id,
                			triggerid: params.trigger_id,
                			triggerurl: params.trigger_url,
                			eventtags: params.event_tags,
                			eventid: params.event_id,
                			actionid: params.action_id,
                			graphs: params.graphs,
                			hostlinks: params.host_links,
                			graphlinks: params.graph_links,
                			acklinks: params.ack_links,
                			eventlinks: params.event_links,
                			triggerlinks: params.trigger_links,
                			eventtag: params.event_tag,
                			eventidtag: params.eventid_tag,
                			itemidtag: params.itemid_tag,
                			triggeridtag: params.triggerid_tag,
                			actionidtag: params.actionid_tag,
                			hostidtag: params.hostid_tag,
                			zntsettingstag: params.zntsettings_tag,
                			zntmentions: params.zntmentions,
                			graphs_period: params.graphs_period,
                		},
                        data,
                        response,
                        request = new HttpRequest(),
                		url = params.znt_proto + '://' + params.znt_host + ':' + params.znt_port + '/api/latest/telegram/sendMessage';
                		Zabbix.log(4, '[ZNT Webhook] url: ' + url);
                		
                        request.addHeader('Content-Type: application/json');
                		request.addHeader('User-Agent: Zabbix');
                		
                        data = JSON.stringify(fields);
                
                        Zabbix.log(4, '[ZNT Webhook] params: ' + data);
                        response = request.post(url, data);
                        Zabbix.log(4, '[ZNT Webhook] HTTP code: ' + request.getStatus());
                        Zabbix.log(4, '[ZNT Webhook] HTTP description: ' + response.description);
                        try {
                            response = JSON.parse(response);
                        }
                        catch (error) {
                            response = null;
                        }
                
                        if (request.getStatus() !== 200) {
                            if (typeof response.description === 'string') {
                                throw response.description;
                            }
                            else {
                                throw 'Unknown error. Check debug log for more information.';
                            }
                        }
                    }
                };
                
                try {
                    var params = JSON.parse(value);
                
                    znt.sendmessage();
                
                    return 'OK';
                }
                catch (error) {
                    Zabbix.log(4, '[ZNT Webhook] notification failed: ' + error);
                    throw 'Sending failed: ' + error + '.';
                }
      timeout: 10s
      description: |
        ZNT TPDA
        
        → Trigger-based notifications and commands
        → Problem update notifications and commands
        → Discovery notifications and commands
        → Autoregistration notifications and commands
        
        https://github.com/xxsokolov/znt
      message_templates:
        -
          event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: '{Trigger_Problem} {TRIGGER.SEVERITY} {{TRIGGER.SEVERITY}}: {EVENT.NAME}'
          message: |
            Host: {HOST.HOST} [{HOST.IP}]
            Last value: {ITEM.LASTVALUE1} ({TIME})
            Duration: {EVENT.AGE}
            
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Original problem ID: {EVENT.ID}
        -
          event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: '{Trigger_Resolved} {TRIGGER.SEVERITY} {{TRIGGER.SEVERITY}} {EVENT.NAME}'
          message: |
            Host: {HOST.HOST} [{HOST.IP}]
            Last value: {ITEM.LASTVALUE1} ({TIME})
            Duration: {EVENT.AGE}
            
            Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Original problem ID: {EVENT.ID}
        -
          event_source: TRIGGERS
          operation_mode: UPDATE
          subject: '{Trigger_Update} {TRIGGER.SEVERITY} {{TRIGGER.SEVERITY}} {EVENT.NAME}'
          message: |
            Host: {HOST.HOST} [{HOST.IP}]
            Last value: {ITEM.LASTVALUE1} ({TIME})
            Duration: {EVENT.AGE}
            
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            {EVENT.UPDATE.MESSAGE}
            
            Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.
        -
          event_source: DISCOVERY
          operation_mode: PROBLEM
          subject: '{Discovery} {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}'
          message: |
            Discovery rule: {DISCOVERY.RULE.NAME}
            
            Device IP: {DISCOVERY.DEVICE.IPADDRESS}
            Device DNS: {DISCOVERY.DEVICE.DNS}
            Device status: {DISCOVERY.DEVICE.STATUS}
            Device uptime: {DISCOVERY.DEVICE.UPTIME}
            
            Device service name: {DISCOVERY.SERVICE.NAME}
            Device service port: {DISCOVERY.SERVICE.PORT}
            Device service status: {DISCOVERY.SERVICE.STATUS}
            Device service uptime: {DISCOVERY.SERVICE.UPTIME}
        -
          event_source: AUTOREGISTRATION
          operation_mode: PROBLEM
          subject: '{Autoregistration} {HOST.HOST}'
          message: |
            Host name: {HOST.HOST}
            Host IP: {HOST.IP}
            Agent port: {HOST.PORT}
